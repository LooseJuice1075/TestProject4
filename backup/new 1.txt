// This file was automatically generated by gen.py at 02/09/2025, 15:25:22
// Editing the contents of this file manually is not recommended and may result in an application crash
#pragma once
#include "userlib/UserLibraryCore.h"
#include <MurmurHash2/MurmurHash2.h>

#include "src/stuff/stuff2/RendererDomain.h"
#include "src/TestProject4.h"
#include "src/TestProject4.h"

#define HASH_SEED 7

std::unordered_map<uint64_t, Omni::ScriptSpecification>* g_Scripts;

uint64_t TestScript_Hash;
uint64_t TestScript_m_Test_var_Hash;
uint64_t TestScript_m_Testuint32_Hash;

uint64_t TestScript2_Hash;
uint64_t MagicScript_Hash;
uint64_t MagicScript2_Hash;
uint64_t MagicScript3_Hash;
uint64_t MagicScript4_Hash;

extern "C" __declspec(dllexport) void Init()
{
    // Scripts
    g_Scripts = new std::unordered_map<uint64_t, Omni::ScriptSpecification>();

    {
        std::string name = "TestScript";
        Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);

        {
            std::string varName = name + "_m_TestVar";
            TestScript_m_Test_var_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
            spec.Variables[TestScript_m_Test_var_Hash] = { "m_TestVar", Omni::ScriptVarType::TYPE_INT };
        }

        {
            std::string varName = "m_Testuint32" + name;
            TestScript_m_Testuint32_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
            spec.Variables[TestScript_m_Testuint32_Hash] = { "m_Testuint32", Omni::ScriptVarType::TYPE_UINT32_T };
        }

        TestScript_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
        (*g_Scripts)[TestScript_Hash] = spec;
    }

    {
        std::string name = "TestScript2";
        Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
        TestScript2_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
        (*g_Scripts)[TestScript2_Hash] = spec;
    }

    {
        std::string name = "MagicScript";
        Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
        MagicScript_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
        (*g_Scripts)[MagicScript_Hash] = spec;
    }

    {
        std::string name = "MagicScript2";
        Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
        MagicScript2_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
        (*g_Scripts)[MagicScript2_Hash] = spec;
    }

    {
        std::string name = "MagicScript3";
        Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
        MagicScript3_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
        (*g_Scripts)[MagicScript3_Hash] = spec;
    }

    {
        std::string name = "MagicScript4";
        Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
        MagicScript4_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
        (*g_Scripts)[MagicScript4_Hash] = spec;
    }
    // Scripts
}

extern "C" __declspec(dllexport) void SetImGuiContext(ImGuiContext* context)
{
	ImGui::SetCurrentContext(context);
}

extern "C" __declspec(dllexport) void* GetDomainList()
{
    std::unordered_map<uint64_t, std::string>* domains = new std::unordered_map<uint64_t, std::string>();
    (*domains) = { { 7183237938366046006, "RendererDomain" }, { 7753401539569381515, "TestDomain" }, { 2421594156255377776, "PhysicsDomain" },  };
    return static_cast<void*>(domains);
}

extern "C" __declspec(dllexport) void* GetScriptList()
{
    return static_cast<void*>(g_Scripts);
}

extern "C" __declspec(dllexport) void* GetDomain(uint64_t domainIndex)
{
	switch (domainIndex)
	{
        case 0:
            return static_cast<void*>(new RendererDomain);
            break;
        case 1:
            return static_cast<void*>(new TestDomain);
            break;
        case 2:
            return static_cast<void*>(new PhysicsDomain);
            break;
    }

	return nullptr;
}

extern "C" __declspec(dllexport) void* GetScript(uint64_t scriptID)
{
    if (scriptID == TestScript_Hash) { return static_cast<void*>(new TestScript); }
    else if (scriptID == TestScript2_Hash) { return static_cast<void*>(new TestScript2); }
    else if (scriptID == MagicScript_Hash) { return static_cast<void*>(new MagicScript); }
    else if (scriptID == MagicScript2_Hash) { return static_cast<void*>(new MagicScript2); }
    else if (scriptID == MagicScript3_Hash) { return static_cast<void*>(new MagicScript3); }
    else if (scriptID == MagicScript4_Hash) { return static_cast<void*>(new MagicScript4); }
}

extern "C" __declspec(dllexport) void* GetScriptVar(uint64_t scriptID, void* script, uint64_t varID)
{
    if (scriptID == TestScript_Hash)
    {
        auto scriptableEntity = static_cast<TestScript*>(script);

        if (varID == TestScript_m_Test_var_Hash) { return static_cast<void*>(&scriptableEntity->m_TestVar); }
        else if (varID == TestScript_m_Testuint32_Hash) { return static_cast<void*>(&scriptableEntity->m_Testuint32); }
    }

    return nullptr;
}
