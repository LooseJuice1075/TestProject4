// This file was automatically generated by gen.py at 02/20/2025, 22:42:03
// Editing the contents of this file manually is not recommended and may result in an application crash
#pragma once
#include "userlib/UserLibraryCore.h"
#include <MurmurHash2/MurmurHash2.h>

#include "src/stuff/stuff2/RendererDomain.h"
#include "src/TestProject4.h"
#include "src/TestProject4.h"

std::unordered_map<uint64_t, std::string>* g_Domains;
std::unordered_map<uint64_t, Omni::ScriptSpecification>* g_Scripts;

// Hashes

uint64_t TestDomain_Hash;

uint64_t PlayerScript_Hash;
uint64_t PlayerScript_m_MoveSpeed_Hash;

uint64_t EnemyScript_Hash;
uint64_t EnemyScript_m_MoveSpeed_Hash;

uint64_t TestScript_Hash;
uint64_t TestScript_m_TestVar_Hash;
uint64_t TestScript_m_SuperVar_Hash;
uint64_t TestScript_m_TestVar3_Hash;
uint64_t TestScript_m_Testuint32_Hash;
uint64_t TestScript_m_Testuint64_Hash;
uint64_t TestScript_m_Super32_Hash;
uint64_t TestScript_m_Super64_Hash;
uint64_t TestScript_m_TestFloat_Hash;
uint64_t TestScript_m_TestDouble_Hash;
uint64_t TestScript_m_TestBool_Hash;
uint64_t TestScript_m_TestString_Hash;
uint64_t TestScript_m_SuperString_Hash;

uint64_t TestScript2_Hash;
uint64_t TestScript2_m_FixedUpdateCounter_Hash;

uint64_t MagicScript_Hash;

uint64_t MagicScript2_Hash;

uint64_t MagicScript3_Hash;

uint64_t MagicScript4_Hash;


// Hashes

extern "C" __declspec(dllexport) void Init()
{
	// Domains
	g_Domains = new std::unordered_map<uint64_t, std::string>();

	{
		std::string name = "TestDomain";
		TestDomain_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Domains)[TestDomain_Hash] = name;
	}
	// Domains

    // Scripts
    g_Scripts = new std::unordered_map<uint64_t, Omni::ScriptSpecification>();
    
	{
		std::string name = "PlayerScript";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);

		{
			std::string varName = name + "_m_MoveSpeed";
			PlayerScript_m_MoveSpeed_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[PlayerScript_m_MoveSpeed_Hash] = { "m_MoveSpeed", Omni::ScriptVarType::TYPE_INT };
		}

		PlayerScript_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[PlayerScript_Hash] = spec;
	}

	{
		std::string name = "EnemyScript";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);

		{
			std::string varName = name + "_m_MoveSpeed";
			EnemyScript_m_MoveSpeed_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[EnemyScript_m_MoveSpeed_Hash] = { "m_MoveSpeed", Omni::ScriptVarType::TYPE_INT };
		}

		EnemyScript_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[EnemyScript_Hash] = spec;
	}

	{
		std::string name = "TestScript";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);

		{
			std::string varName = name + "_m_TestVar";
			TestScript_m_TestVar_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_TestVar_Hash] = { "m_TestVar", Omni::ScriptVarType::TYPE_INT };
		}

		{
			std::string varName = name + "_m_SuperVar";
			TestScript_m_SuperVar_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_SuperVar_Hash] = { "m_SuperVar", Omni::ScriptVarType::TYPE_INT };
		}

		{
			std::string varName = name + "_m_TestVar3";
			TestScript_m_TestVar3_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_TestVar3_Hash] = { "m_TestVar3", Omni::ScriptVarType::TYPE_INT };
		}

		{
			std::string varName = name + "_m_Testuint32";
			TestScript_m_Testuint32_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_Testuint32_Hash] = { "m_Testuint32", Omni::ScriptVarType::TYPE_UINT32_T };
		}

		{
			std::string varName = name + "_m_Testuint64";
			TestScript_m_Testuint64_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_Testuint64_Hash] = { "m_Testuint64", Omni::ScriptVarType::TYPE_UINT64_T };
		}

		{
			std::string varName = name + "_m_Super32";
			TestScript_m_Super32_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_Super32_Hash] = { "m_Super32", Omni::ScriptVarType::TYPE_UINT32_T };
		}

		{
			std::string varName = name + "_m_Super64";
			TestScript_m_Super64_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_Super64_Hash] = { "m_Super64", Omni::ScriptVarType::TYPE_UINT64_T };
		}

		{
			std::string varName = name + "_m_TestFloat";
			TestScript_m_TestFloat_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_TestFloat_Hash] = { "m_TestFloat", Omni::ScriptVarType::TYPE_FLOAT };
		}

		{
			std::string varName = name + "_m_TestDouble";
			TestScript_m_TestDouble_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_TestDouble_Hash] = { "m_TestDouble", Omni::ScriptVarType::TYPE_DOUBLE };
		}

		{
			std::string varName = name + "_m_TestBool";
			TestScript_m_TestBool_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_TestBool_Hash] = { "m_TestBool", Omni::ScriptVarType::TYPE_BOOL };
		}

		{
			std::string varName = name + "_m_TestString";
			TestScript_m_TestString_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_TestString_Hash] = { "m_TestString", Omni::ScriptVarType::TYPE_STRING };
		}

		{
			std::string varName = name + "_m_SuperString";
			TestScript_m_SuperString_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript_m_SuperString_Hash] = { "m_SuperString", Omni::ScriptVarType::TYPE_STRING };
		}

		TestScript_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[TestScript_Hash] = spec;
	}

	{
		std::string name = "TestScript2";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);

		{
			std::string varName = name + "_m_FixedUpdateCounter";
			TestScript2_m_FixedUpdateCounter_Hash = MurmurHash64A(varName.c_str(), varName.length(), HASH_SEED);
			spec.Variables[TestScript2_m_FixedUpdateCounter_Hash] = { "m_FixedUpdateCounter", Omni::ScriptVarType::TYPE_UINT64_T };
		}

		TestScript2_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[TestScript2_Hash] = spec;
	}

	{
		std::string name = "MagicScript";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
		MagicScript_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[MagicScript_Hash] = spec;
	}

	{
		std::string name = "MagicScript2";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
		MagicScript2_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[MagicScript2_Hash] = spec;
	}

	{
		std::string name = "MagicScript3";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
		MagicScript3_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[MagicScript3_Hash] = spec;
	}

	{
		std::string name = "MagicScript4";
		Omni::ScriptSpecification spec = Omni::ScriptSpecification(name);
		MagicScript4_Hash = MurmurHash64A(name.c_str(), name.length(), HASH_SEED);
		(*g_Scripts)[MagicScript4_Hash] = spec;
	}


    // Scripts
}

extern "C" __declspec(dllexport) void SetImGuiContext(ImGuiContext* context)
{
	ImGui::SetCurrentContext(context);
}

extern "C" __declspec(dllexport) void* GetDomainList()
{
    /*std::unordered_map<uint64_t, std::string>* domains = new std::unordered_map<uint64_t, std::string>();
    (*domains) = { { 8795621887803483795, "RendererDomain" }, { 9105518708008331987, "TestDomain" }, { -1025017646961119085, "PhysicsDomain" },  };
    return static_cast<void*>(domains);*/

	return static_cast<void*>(g_Domains);
}

extern "C" __declspec(dllexport) void* GetScriptList()
{
    return static_cast<void*>(g_Scripts);
}

extern "C" __declspec(dllexport) void* GetDomain(uint64_t domainID)
{
	/*switch (domainID)
	{
        case 0:
            return static_cast<void*>(new RendererDomain);
            break;
        case 1:
            return static_cast<void*>(new TestDomain);
            break;
        case 2:
            return static_cast<void*>(new PhysicsDomain);
            break;
    }*/

	if (domainID == TestDomain_Hash) { return static_cast<void*>(new TestDomain); }

	return nullptr;
}

extern "C" __declspec(dllexport) void* GetScript(uint64_t scriptID)
{
	if (scriptID == PlayerScript_Hash) { return static_cast<void*>(new PlayerScript); }
	else if (scriptID == EnemyScript_Hash) { return static_cast<void*>(new EnemyScript); }
	else if (scriptID == TestScript_Hash) { return static_cast<void*>(new TestScript); }
	else if (scriptID == TestScript2_Hash) { return static_cast<void*>(new TestScript2); }
	else if (scriptID == MagicScript_Hash) { return static_cast<void*>(new MagicScript); }
	else if (scriptID == MagicScript2_Hash) { return static_cast<void*>(new MagicScript2); }
	else if (scriptID == MagicScript3_Hash) { return static_cast<void*>(new MagicScript3); }
	else if (scriptID == MagicScript4_Hash) { return static_cast<void*>(new MagicScript4); }

}

extern "C" __declspec(dllexport) void* GetScriptVar(uint64_t scriptID, void* script, uint64_t varID)
{
	if (scriptID == PlayerScript_Hash)
	{
		auto scriptableEntity = static_cast<PlayerScript*>(script);

		if (varID == PlayerScript_m_MoveSpeed_Hash) { return static_cast<void*>(&scriptableEntity->m_MoveSpeed); }
	}
	else if (scriptID == EnemyScript_Hash)
	{
		auto scriptableEntity = static_cast<EnemyScript*>(script);

		if (varID == EnemyScript_m_MoveSpeed_Hash) { return static_cast<void*>(&scriptableEntity->m_MoveSpeed); }
	}
	else if (scriptID == TestScript_Hash)
	{
		auto scriptableEntity = static_cast<TestScript*>(script);

		if (varID == TestScript_m_TestVar_Hash) { return static_cast<void*>(&scriptableEntity->m_TestVar); }
		else if (varID == TestScript_m_SuperVar_Hash) { return static_cast<void*>(&scriptableEntity->m_SuperVar); }
		else if (varID == TestScript_m_TestVar3_Hash) { return static_cast<void*>(&scriptableEntity->m_TestVar3); }
		else if (varID == TestScript_m_Testuint32_Hash) { return static_cast<void*>(&scriptableEntity->m_Testuint32); }
		else if (varID == TestScript_m_Testuint64_Hash) { return static_cast<void*>(&scriptableEntity->m_Testuint64); }
		else if (varID == TestScript_m_Super32_Hash) { return static_cast<void*>(&scriptableEntity->m_Super32); }
		else if (varID == TestScript_m_Super64_Hash) { return static_cast<void*>(&scriptableEntity->m_Super64); }
		else if (varID == TestScript_m_TestFloat_Hash) { return static_cast<void*>(&scriptableEntity->m_TestFloat); }
		else if (varID == TestScript_m_TestDouble_Hash) { return static_cast<void*>(&scriptableEntity->m_TestDouble); }
		else if (varID == TestScript_m_TestBool_Hash) { return static_cast<void*>(&scriptableEntity->m_TestBool); }
		else if (varID == TestScript_m_TestString_Hash) { return static_cast<void*>(&scriptableEntity->m_TestString); }
		else if (varID == TestScript_m_SuperString_Hash) { return static_cast<void*>(&scriptableEntity->m_SuperString); }
	}
	else if (scriptID == TestScript2_Hash)
	{
		auto scriptableEntity = static_cast<TestScript2*>(script);

		if (varID == TestScript2_m_FixedUpdateCounter_Hash) { return static_cast<void*>(&scriptableEntity->m_FixedUpdateCounter); }
	}

    return nullptr;
}

extern "C" __declspec(dllexport) void* GetScriptSpecs()
{
    std::vector<std::pair<uint64_t, std::vector<Omni::VariableSpecification>*>>* scriptSpecs = new std::vector<std::pair<uint64_t, std::vector<Omni::VariableSpecification>*>>();

	{
		std::vector<Omni::VariableSpecification>* varSpecs = new std::vector<Omni::VariableSpecification>();
		varSpecs->emplace_back((*g_Scripts)[PlayerScript_Hash].Variables[PlayerScript_m_MoveSpeed_Hash]);
		scriptSpecs->emplace_back(std::make_pair(PlayerScript_Hash, varSpecs));
	}

	{
		std::vector<Omni::VariableSpecification>* varSpecs = new std::vector<Omni::VariableSpecification>();
		varSpecs->emplace_back((*g_Scripts)[EnemyScript_Hash].Variables[EnemyScript_m_MoveSpeed_Hash]);
		scriptSpecs->emplace_back(std::make_pair(EnemyScript_Hash, varSpecs));
	}

	{
		std::vector<Omni::VariableSpecification>* varSpecs = new std::vector<Omni::VariableSpecification>();
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_TestVar_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_SuperVar_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_TestVar3_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_Testuint32_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_Testuint64_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_Super32_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_Super64_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_TestFloat_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_TestDouble_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_TestBool_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_TestString_Hash]);
		varSpecs->emplace_back((*g_Scripts)[TestScript_Hash].Variables[TestScript_m_SuperString_Hash]);
		scriptSpecs->emplace_back(std::make_pair(TestScript_Hash, varSpecs));
	}

	{
		std::vector<Omni::VariableSpecification>* varSpecs = new std::vector<Omni::VariableSpecification>();
		varSpecs->emplace_back((*g_Scripts)[TestScript2_Hash].Variables[TestScript2_m_FixedUpdateCounter_Hash]);
		scriptSpecs->emplace_back(std::make_pair(TestScript2_Hash, varSpecs));
	}

	{
		scriptSpecs->emplace_back(std::make_pair(MagicScript_Hash, nullptr));
	}

	{
		scriptSpecs->emplace_back(std::make_pair(MagicScript2_Hash, nullptr));
	}

	{
		scriptSpecs->emplace_back(std::make_pair(MagicScript3_Hash, nullptr));
	}

	{
		scriptSpecs->emplace_back(std::make_pair(MagicScript4_Hash, nullptr));
	}


    return static_cast<void*>(scriptSpecs);
}

uint64_t EnemyComponent_Hash;
uint64_t EnemyComponent_TestInt_Hash;

extern "C" __declspec(dllexport) bool HasUserComponent(uint64_t entity, Scene* scene, uint64_t componentID)
{
	Omni::Entity e = { (entt::entity)entity, scene };

	if (componentID == EnemyComponent_Hash) { return e.HasComponent<EnemyComponent>(); }
}

extern "C" __declspec(dllexport) void AddUserComponent(uint64_t entity, Scene* scene, uint64_t componentID)
{
	Omni::Entity e = { (entt::entity)entity, scene };

	if (componentID == EnemyComponent_Hash) { e.AddComponent<EnemyComponent>(); }
}

extern "C" __declspec(dllexport) void* GetUserComponentVar(uint64_t entity, Scene* scene, uint64_t componentID, uint64_t varID)
{
	Omni::Entity e = { (entt::entity)entity, scene };

	if (componentID == EnemyComponent_Hash)
	{
		auto component = &e.GetComponent<EnemyComponent>();

		if (varID == EnemyComponent_TestInt_Hash) { return static_cast<void*>(&component->TestInt); }
	}
}
